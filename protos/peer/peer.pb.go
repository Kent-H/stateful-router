// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/peer/peer.proto

package peer

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HelloRequest struct {
	Ordinal              uint32   `protobuf:"varint,1,opt,name=ordinal,proto3" json:"ordinal,omitempty"`
	Ready                bool     `protobuf:"varint,2,opt,name=ready,proto3" json:"ready,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloRequest) Reset()         { *m = HelloRequest{} }
func (m *HelloRequest) String() string { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()    {}
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3079711bc088ced, []int{0}
}

func (m *HelloRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloRequest.Unmarshal(m, b)
}
func (m *HelloRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloRequest.Marshal(b, m, deterministic)
}
func (m *HelloRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloRequest.Merge(m, src)
}
func (m *HelloRequest) XXX_Size() int {
	return xxx_messageInfo_HelloRequest.Size(m)
}
func (m *HelloRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HelloRequest proto.InternalMessageInfo

func (m *HelloRequest) GetOrdinal() uint32 {
	if m != nil {
		return m.Ordinal
	}
	return 0
}

func (m *HelloRequest) GetReady() bool {
	if m != nil {
		return m.Ready
	}
	return false
}

type ReadyRequest struct {
	Ordinal              uint32   `protobuf:"varint,1,opt,name=ordinal,proto3" json:"ordinal,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadyRequest) Reset()         { *m = ReadyRequest{} }
func (m *ReadyRequest) String() string { return proto.CompactTextString(m) }
func (*ReadyRequest) ProtoMessage()    {}
func (*ReadyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3079711bc088ced, []int{1}
}

func (m *ReadyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadyRequest.Unmarshal(m, b)
}
func (m *ReadyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadyRequest.Marshal(b, m, deterministic)
}
func (m *ReadyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadyRequest.Merge(m, src)
}
func (m *ReadyRequest) XXX_Size() int {
	return xxx_messageInfo_ReadyRequest.Size(m)
}
func (m *ReadyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReadyRequest proto.InternalMessageInfo

func (m *ReadyRequest) GetOrdinal() uint32 {
	if m != nil {
		return m.Ordinal
	}
	return 0
}

type HandoffRequest struct {
	Device               uint64   `protobuf:"varint,2,opt,name=device,proto3" json:"device,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HandoffRequest) Reset()         { *m = HandoffRequest{} }
func (m *HandoffRequest) String() string { return proto.CompactTextString(m) }
func (*HandoffRequest) ProtoMessage()    {}
func (*HandoffRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3079711bc088ced, []int{2}
}

func (m *HandoffRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HandoffRequest.Unmarshal(m, b)
}
func (m *HandoffRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HandoffRequest.Marshal(b, m, deterministic)
}
func (m *HandoffRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HandoffRequest.Merge(m, src)
}
func (m *HandoffRequest) XXX_Size() int {
	return xxx_messageInfo_HandoffRequest.Size(m)
}
func (m *HandoffRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HandoffRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HandoffRequest proto.InternalMessageInfo

func (m *HandoffRequest) GetDevice() uint64 {
	if m != nil {
		return m.Device
	}
	return 0
}

func init() {
	proto.RegisterType((*HelloRequest)(nil), "peer.HelloRequest")
	proto.RegisterType((*ReadyRequest)(nil), "peer.ReadyRequest")
	proto.RegisterType((*HandoffRequest)(nil), "peer.HandoffRequest")
}

func init() { proto.RegisterFile("protos/peer/peer.proto", fileDescriptor_c3079711bc088ced) }

var fileDescriptor_c3079711bc088ced = []byte{
	// 225 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x2f, 0xd6, 0x2f, 0x48, 0x4d, 0x2d, 0x02, 0x13, 0x7a, 0x60, 0x01, 0x21, 0x16, 0x10, 0x5b,
	0x4a, 0x3a, 0x3d, 0x3f, 0x3f, 0x3d, 0x27, 0x55, 0x1f, 0x2c, 0x96, 0x54, 0x9a, 0xa6, 0x9f, 0x9a,
	0x5b, 0x50, 0x52, 0x09, 0x51, 0xa2, 0x64, 0xc7, 0xc5, 0xe3, 0x91, 0x9a, 0x93, 0x93, 0x1f, 0x94,
	0x5a, 0x58, 0x9a, 0x5a, 0x5c, 0x22, 0x24, 0xc1, 0xc5, 0x9e, 0x5f, 0x94, 0x92, 0x99, 0x97, 0x98,
	0x23, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x1b, 0x04, 0xe3, 0x0a, 0x89, 0x70, 0xb1, 0x16, 0xa5, 0x26,
	0xa6, 0x54, 0x4a, 0x30, 0x29, 0x30, 0x6a, 0x70, 0x04, 0x41, 0x38, 0x4a, 0x1a, 0x5c, 0x3c, 0x41,
	0x20, 0x06, 0x41, 0xfd, 0x4a, 0x1a, 0x5c, 0x7c, 0x1e, 0x89, 0x79, 0x29, 0xf9, 0x69, 0x69, 0x30,
	0xb5, 0x62, 0x5c, 0x6c, 0x29, 0xa9, 0x65, 0x99, 0xc9, 0xa9, 0x60, 0x23, 0x59, 0x82, 0xa0, 0x3c,
	0xa3, 0xf5, 0x8c, 0x5c, 0x2c, 0x01, 0xa9, 0xa9, 0x45, 0x42, 0xa6, 0x5c, 0xac, 0x60, 0xc7, 0x09,
	0x09, 0xe9, 0x81, 0x7d, 0x85, 0xec, 0x52, 0x29, 0x31, 0x3d, 0x88, 0xbf, 0xf4, 0x60, 0xfe, 0xd2,
	0x73, 0x05, 0xf9, 0x4b, 0x89, 0x01, 0xa4, 0x0d, 0xec, 0x26, 0x98, 0x36, 0x64, 0x07, 0xe2, 0xd1,
	0x66, 0xc9, 0xc5, 0x0e, 0x75, 0xa0, 0x90, 0x08, 0xd4, 0x3e, 0x14, 0xf7, 0xe2, 0xd6, 0x9a, 0xc4,
	0x06, 0x16, 0x31, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x60, 0x6e, 0xda, 0x37, 0x89, 0x01, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PeerClient is the client API for Peer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PeerClient interface {
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Ready(ctx context.Context, in *ReadyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Handoff(ctx context.Context, in *HandoffRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type peerClient struct {
	cc *grpc.ClientConn
}

func NewPeerClient(cc *grpc.ClientConn) PeerClient {
	return &peerClient{cc}
}

func (c *peerClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/peer.Peer/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerClient) Ready(ctx context.Context, in *ReadyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/peer.Peer/Ready", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerClient) Handoff(ctx context.Context, in *HandoffRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/peer.Peer/Handoff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PeerServer is the server API for Peer service.
type PeerServer interface {
	Hello(context.Context, *HelloRequest) (*empty.Empty, error)
	Ready(context.Context, *ReadyRequest) (*empty.Empty, error)
	Handoff(context.Context, *HandoffRequest) (*empty.Empty, error)
}

// UnimplementedPeerServer can be embedded to have forward compatible implementations.
type UnimplementedPeerServer struct {
}

func (*UnimplementedPeerServer) Hello(ctx context.Context, req *HelloRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (*UnimplementedPeerServer) Ready(ctx context.Context, req *ReadyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ready not implemented")
}
func (*UnimplementedPeerServer) Handoff(ctx context.Context, req *HandoffRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Handoff not implemented")
}

func RegisterPeerServer(s *grpc.Server, srv PeerServer) {
	s.RegisterService(&_Peer_serviceDesc, srv)
}

func _Peer_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peer.Peer/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Peer_Ready_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServer).Ready(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peer.Peer/Ready",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServer).Ready(ctx, req.(*ReadyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Peer_Handoff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandoffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServer).Handoff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peer.Peer/Handoff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServer).Handoff(ctx, req.(*HandoffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Peer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "peer.Peer",
	HandlerType: (*PeerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _Peer_Hello_Handler,
		},
		{
			MethodName: "Ready",
			Handler:    _Peer_Ready_Handler,
		},
		{
			MethodName: "Handoff",
			Handler:    _Peer_Handoff_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/peer/peer.proto",
}
