// Code generated by protoc-gen-go. DO NOT EDIT.
// source: peer/peer.proto

package peer

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HelloRequest struct {
	Ordinal              uint32   `protobuf:"varint,1,opt,name=ordinal,proto3" json:"ordinal,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloRequest) Reset()         { *m = HelloRequest{} }
func (m *HelloRequest) String() string { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()    {}
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c302117fbb08ad42, []int{0}
}

func (m *HelloRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloRequest.Unmarshal(m, b)
}
func (m *HelloRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloRequest.Marshal(b, m, deterministic)
}
func (m *HelloRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloRequest.Merge(m, src)
}
func (m *HelloRequest) XXX_Size() int {
	return xxx_messageInfo_HelloRequest.Size(m)
}
func (m *HelloRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HelloRequest proto.InternalMessageInfo

func (m *HelloRequest) GetOrdinal() uint32 {
	if m != nil {
		return m.Ordinal
	}
	return 0
}

type NextDeviceRequest struct {
	Ordinal              uint32   `protobuf:"varint,1,opt,name=ordinal,proto3" json:"ordinal,omitempty"`
	Readiness            uint64   `protobuf:"varint,2,opt,name=readiness,proto3" json:"readiness,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NextDeviceRequest) Reset()         { *m = NextDeviceRequest{} }
func (m *NextDeviceRequest) String() string { return proto.CompactTextString(m) }
func (*NextDeviceRequest) ProtoMessage()    {}
func (*NextDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c302117fbb08ad42, []int{1}
}

func (m *NextDeviceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NextDeviceRequest.Unmarshal(m, b)
}
func (m *NextDeviceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NextDeviceRequest.Marshal(b, m, deterministic)
}
func (m *NextDeviceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NextDeviceRequest.Merge(m, src)
}
func (m *NextDeviceRequest) XXX_Size() int {
	return xxx_messageInfo_NextDeviceRequest.Size(m)
}
func (m *NextDeviceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NextDeviceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NextDeviceRequest proto.InternalMessageInfo

func (m *NextDeviceRequest) GetOrdinal() uint32 {
	if m != nil {
		return m.Ordinal
	}
	return 0
}

func (m *NextDeviceRequest) GetReadiness() uint64 {
	if m != nil {
		return m.Readiness
	}
	return 0
}

type NextDeviceResponse struct {
	Has                  bool     `protobuf:"varint,1,opt,name=has,proto3" json:"has,omitempty"`
	Last                 bool     `protobuf:"varint,2,opt,name=last,proto3" json:"last,omitempty"`
	Device               uint64   `protobuf:"varint,3,opt,name=device,proto3" json:"device,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NextDeviceResponse) Reset()         { *m = NextDeviceResponse{} }
func (m *NextDeviceResponse) String() string { return proto.CompactTextString(m) }
func (*NextDeviceResponse) ProtoMessage()    {}
func (*NextDeviceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c302117fbb08ad42, []int{2}
}

func (m *NextDeviceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NextDeviceResponse.Unmarshal(m, b)
}
func (m *NextDeviceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NextDeviceResponse.Marshal(b, m, deterministic)
}
func (m *NextDeviceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NextDeviceResponse.Merge(m, src)
}
func (m *NextDeviceResponse) XXX_Size() int {
	return xxx_messageInfo_NextDeviceResponse.Size(m)
}
func (m *NextDeviceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NextDeviceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NextDeviceResponse proto.InternalMessageInfo

func (m *NextDeviceResponse) GetHas() bool {
	if m != nil {
		return m.Has
	}
	return false
}

func (m *NextDeviceResponse) GetLast() bool {
	if m != nil {
		return m.Last
	}
	return false
}

func (m *NextDeviceResponse) GetDevice() uint64 {
	if m != nil {
		return m.Device
	}
	return 0
}

type ReadinessRequest struct {
	Ordinal              uint32   `protobuf:"varint,1,opt,name=ordinal,proto3" json:"ordinal,omitempty"`
	Readiness            uint64   `protobuf:"varint,2,opt,name=readiness,proto3" json:"readiness,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadinessRequest) Reset()         { *m = ReadinessRequest{} }
func (m *ReadinessRequest) String() string { return proto.CompactTextString(m) }
func (*ReadinessRequest) ProtoMessage()    {}
func (*ReadinessRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c302117fbb08ad42, []int{3}
}

func (m *ReadinessRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadinessRequest.Unmarshal(m, b)
}
func (m *ReadinessRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadinessRequest.Marshal(b, m, deterministic)
}
func (m *ReadinessRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadinessRequest.Merge(m, src)
}
func (m *ReadinessRequest) XXX_Size() int {
	return xxx_messageInfo_ReadinessRequest.Size(m)
}
func (m *ReadinessRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadinessRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReadinessRequest proto.InternalMessageInfo

func (m *ReadinessRequest) GetOrdinal() uint32 {
	if m != nil {
		return m.Ordinal
	}
	return 0
}

func (m *ReadinessRequest) GetReadiness() uint64 {
	if m != nil {
		return m.Readiness
	}
	return 0
}

type StatsRequest struct {
	DeviceCounts         map[uint32]uint32 `protobuf:"bytes,1,rep,name=deviceCounts,proto3" json:"deviceCounts,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *StatsRequest) Reset()         { *m = StatsRequest{} }
func (m *StatsRequest) String() string { return proto.CompactTextString(m) }
func (*StatsRequest) ProtoMessage()    {}
func (*StatsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c302117fbb08ad42, []int{4}
}

func (m *StatsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatsRequest.Unmarshal(m, b)
}
func (m *StatsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatsRequest.Marshal(b, m, deterministic)
}
func (m *StatsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatsRequest.Merge(m, src)
}
func (m *StatsRequest) XXX_Size() int {
	return xxx_messageInfo_StatsRequest.Size(m)
}
func (m *StatsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StatsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StatsRequest proto.InternalMessageInfo

func (m *StatsRequest) GetDeviceCounts() map[uint32]uint32 {
	if m != nil {
		return m.DeviceCounts
	}
	return nil
}

type HandoffRequest struct {
	Device               uint64   `protobuf:"varint,1,opt,name=device,proto3" json:"device,omitempty"`
	Ordinal              uint32   `protobuf:"varint,2,opt,name=ordinal,proto3" json:"ordinal,omitempty"`
	Devices              uint32   `protobuf:"varint,3,opt,name=devices,proto3" json:"devices,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HandoffRequest) Reset()         { *m = HandoffRequest{} }
func (m *HandoffRequest) String() string { return proto.CompactTextString(m) }
func (*HandoffRequest) ProtoMessage()    {}
func (*HandoffRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c302117fbb08ad42, []int{5}
}

func (m *HandoffRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HandoffRequest.Unmarshal(m, b)
}
func (m *HandoffRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HandoffRequest.Marshal(b, m, deterministic)
}
func (m *HandoffRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HandoffRequest.Merge(m, src)
}
func (m *HandoffRequest) XXX_Size() int {
	return xxx_messageInfo_HandoffRequest.Size(m)
}
func (m *HandoffRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HandoffRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HandoffRequest proto.InternalMessageInfo

func (m *HandoffRequest) GetDevice() uint64 {
	if m != nil {
		return m.Device
	}
	return 0
}

func (m *HandoffRequest) GetOrdinal() uint32 {
	if m != nil {
		return m.Ordinal
	}
	return 0
}

func (m *HandoffRequest) GetDevices() uint32 {
	if m != nil {
		return m.Devices
	}
	return 0
}

func init() {
	proto.RegisterType((*HelloRequest)(nil), "peer.HelloRequest")
	proto.RegisterType((*NextDeviceRequest)(nil), "peer.NextDeviceRequest")
	proto.RegisterType((*NextDeviceResponse)(nil), "peer.NextDeviceResponse")
	proto.RegisterType((*ReadinessRequest)(nil), "peer.ReadinessRequest")
	proto.RegisterType((*StatsRequest)(nil), "peer.StatsRequest")
	proto.RegisterMapType((map[uint32]uint32)(nil), "peer.StatsRequest.DeviceCountsEntry")
	proto.RegisterType((*HandoffRequest)(nil), "peer.HandoffRequest")
}

func init() { proto.RegisterFile("peer/peer.proto", fileDescriptor_c302117fbb08ad42) }

var fileDescriptor_c302117fbb08ad42 = []byte{
	// 410 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x52, 0x4f, 0xef, 0xd2, 0x40,
	0x10, 0xfd, 0xb5, 0x94, 0x3f, 0x0e, 0x20, 0x30, 0x21, 0xd8, 0x54, 0x0f, 0xa4, 0xf1, 0xd0, 0x53,
	0x49, 0x30, 0x26, 0xfe, 0x39, 0x18, 0x03, 0x24, 0x44, 0x13, 0x63, 0xd6, 0x78, 0xf3, 0xb2, 0xd8,
	0x01, 0x89, 0xb5, 0x5b, 0xbb, 0x5b, 0x22, 0x1f, 0xc5, 0x0f, 0xe3, 0x77, 0x33, 0xdd, 0x6d, 0xa1,
	0x48, 0xc4, 0x83, 0x97, 0x66, 0x66, 0xfa, 0x66, 0x76, 0xde, 0x9b, 0x07, 0x83, 0x94, 0x28, 0x9b,
	0x15, 0x9f, 0x30, 0xcd, 0x84, 0x12, 0xe8, 0x14, 0xb1, 0xf7, 0x70, 0x27, 0xc4, 0x2e, 0xa6, 0x99,
	0xae, 0x6d, 0xf2, 0xed, 0x8c, 0xbe, 0xa5, 0xea, 0x68, 0x20, 0x7e, 0x00, 0xbd, 0x35, 0xc5, 0xb1,
	0x60, 0xf4, 0x3d, 0x27, 0xa9, 0xd0, 0x85, 0xb6, 0xc8, 0xa2, 0x7d, 0xc2, 0x63, 0xd7, 0x9a, 0x5a,
	0x41, 0x9f, 0x55, 0xa9, 0xff, 0x16, 0x46, 0xef, 0xe8, 0x87, 0x5a, 0xd2, 0x61, 0xff, 0x99, 0xfe,
	0x09, 0xc7, 0x47, 0x70, 0x2f, 0x23, 0x1e, 0xed, 0x13, 0x92, 0xd2, 0xb5, 0xa7, 0x56, 0xe0, 0xb0,
	0x73, 0xc1, 0x67, 0x80, 0xf5, 0x61, 0x32, 0x15, 0x89, 0x24, 0x1c, 0x42, 0xe3, 0x0b, 0x97, 0x7a,
	0x52, 0x87, 0x15, 0x21, 0x22, 0x38, 0x31, 0x97, 0x4a, 0x0f, 0xe8, 0x30, 0x1d, 0xe3, 0x04, 0x5a,
	0x91, 0xee, 0x73, 0x1b, 0x7a, 0x6c, 0x99, 0xf9, 0x6f, 0x60, 0xc8, 0xaa, 0x07, 0xfe, 0x77, 0xbf,
	0x9f, 0x16, 0xf4, 0x3e, 0x28, 0xae, 0x4e, 0x83, 0xd6, 0xd0, 0x33, 0xcf, 0x2c, 0x44, 0x9e, 0xa8,
	0x62, 0xc7, 0x46, 0xd0, 0x9d, 0x3f, 0x0e, 0xb5, 0xda, 0x75, 0x64, 0xb8, 0xac, 0xc1, 0x56, 0x89,
	0xca, 0x8e, 0xec, 0xa2, 0xd3, 0x7b, 0x05, 0xa3, 0x2b, 0x48, 0xc1, 0xfc, 0x2b, 0x1d, 0xcb, 0x1d,
	0x8b, 0x10, 0xc7, 0xd0, 0x3c, 0xf0, 0x38, 0x27, 0xbd, 0x5b, 0x9f, 0x99, 0xe4, 0x85, 0xfd, 0xcc,
	0xf2, 0x3f, 0xc1, 0xfd, 0x35, 0x4f, 0x22, 0xb1, 0xdd, 0x56, 0xcb, 0x9d, 0x15, 0xb1, 0xea, 0x8a,
	0xd4, 0xd9, 0xdb, 0x97, 0xec, 0x5d, 0x68, 0x1b, 0x8c, 0xd4, 0x22, 0xf6, 0x59, 0x95, 0xce, 0x7f,
	0xd9, 0xe0, 0xbc, 0x27, 0xca, 0xf0, 0x29, 0x34, 0xb5, 0x33, 0x10, 0x0d, 0xc9, 0xba, 0x4d, 0xbc,
	0x49, 0x68, 0x4c, 0x15, 0x56, 0xa6, 0x0a, 0x57, 0x85, 0xa9, 0xfc, 0x3b, 0x7c, 0x0d, 0x70, 0xbe,
	0x2c, 0x3e, 0x30, 0xbd, 0x57, 0xc6, 0xf1, 0xdc, 0xeb, 0x1f, 0xc6, 0x04, 0xfe, 0x1d, 0x2e, 0x60,
	0xf0, 0x31, 0x8d, 0xb8, 0xa2, 0xd3, 0x39, 0x71, 0x62, 0xe0, 0x7f, 0xde, 0xf7, 0xc6, 0x1e, 0x2f,
	0xa1, 0x6b, 0x86, 0xe8, 0xe3, 0x54, 0x24, 0xea, 0x97, 0xba, 0xd1, 0xfc, 0x1c, 0xda, 0xa5, 0xc4,
	0x38, 0x2e, 0xd9, 0x5f, 0x28, 0xfe, 0xf7, 0xd6, 0x4d, 0x4b, 0x57, 0x9e, 0xfc, 0x0e, 0x00, 0x00,
	0xff, 0xff, 0x95, 0x35, 0xd0, 0x5a, 0x8d, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PeerClient is the client API for Peer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PeerClient interface {
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	NextDevice(ctx context.Context, in *NextDeviceRequest, opts ...grpc.CallOption) (*NextDeviceResponse, error)
	UpdateReadiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateStats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Handoff(ctx context.Context, in *HandoffRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type peerClient struct {
	cc *grpc.ClientConn
}

func NewPeerClient(cc *grpc.ClientConn) PeerClient {
	return &peerClient{cc}
}

func (c *peerClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/peer.Peer/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerClient) NextDevice(ctx context.Context, in *NextDeviceRequest, opts ...grpc.CallOption) (*NextDeviceResponse, error) {
	out := new(NextDeviceResponse)
	err := c.cc.Invoke(ctx, "/peer.Peer/NextDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerClient) UpdateReadiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/peer.Peer/UpdateReadiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerClient) UpdateStats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/peer.Peer/UpdateStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerClient) Handoff(ctx context.Context, in *HandoffRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/peer.Peer/Handoff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PeerServer is the server API for Peer service.
type PeerServer interface {
	Hello(context.Context, *HelloRequest) (*empty.Empty, error)
	NextDevice(context.Context, *NextDeviceRequest) (*NextDeviceResponse, error)
	UpdateReadiness(context.Context, *ReadinessRequest) (*empty.Empty, error)
	UpdateStats(context.Context, *StatsRequest) (*empty.Empty, error)
	Handoff(context.Context, *HandoffRequest) (*empty.Empty, error)
}

// UnimplementedPeerServer can be embedded to have forward compatible implementations.
type UnimplementedPeerServer struct {
}

func (*UnimplementedPeerServer) Hello(ctx context.Context, req *HelloRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (*UnimplementedPeerServer) NextDevice(ctx context.Context, req *NextDeviceRequest) (*NextDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextDevice not implemented")
}
func (*UnimplementedPeerServer) UpdateReadiness(ctx context.Context, req *ReadinessRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReadiness not implemented")
}
func (*UnimplementedPeerServer) UpdateStats(ctx context.Context, req *StatsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStats not implemented")
}
func (*UnimplementedPeerServer) Handoff(ctx context.Context, req *HandoffRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Handoff not implemented")
}

func RegisterPeerServer(s *grpc.Server, srv PeerServer) {
	s.RegisterService(&_Peer_serviceDesc, srv)
}

func _Peer_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peer.Peer/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Peer_NextDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServer).NextDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peer.Peer/NextDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServer).NextDevice(ctx, req.(*NextDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Peer_UpdateReadiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServer).UpdateReadiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peer.Peer/UpdateReadiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServer).UpdateReadiness(ctx, req.(*ReadinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Peer_UpdateStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServer).UpdateStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peer.Peer/UpdateStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServer).UpdateStats(ctx, req.(*StatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Peer_Handoff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandoffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServer).Handoff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peer.Peer/Handoff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServer).Handoff(ctx, req.(*HandoffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Peer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "peer.Peer",
	HandlerType: (*PeerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _Peer_Hello_Handler,
		},
		{
			MethodName: "NextDevice",
			Handler:    _Peer_NextDevice_Handler,
		},
		{
			MethodName: "UpdateReadiness",
			Handler:    _Peer_UpdateReadiness_Handler,
		},
		{
			MethodName: "UpdateStats",
			Handler:    _Peer_UpdateStats_Handler,
		},
		{
			MethodName: "Handoff",
			Handler:    _Peer_Handoff_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "peer/peer.proto",
}
